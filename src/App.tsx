// src/App.tsx
import React, { useState, useEffect, useMemo } from "react";
import "@/styles/App.css";
import BoardComponent from "@/components/board/Board";
import { Board } from "@/models/board/Board";
import { Player } from "@/models/Player";
import { Colors } from "@/models/Colors";
import Timer from "@/components/ui/Timer";
import PromotionModal from "@/modals/PromotionModal";
import { FigureNames } from "@/models/figures/Figure";
import { Cell } from "@/models/board/Cell";
import { Rook } from "@/models/figures/Rook";
import { Knight } from "@/models/figures/Knight";
import { Bishop } from "@/models/figures/Bishop";
import { Queen } from "@/models/figures/Queen";
import HistoryPanel from "@/components/ui/HistoryPanel";
import { useMoveHistory } from "@/hooks/useMoveHistory";
import { generateFEN } from "@/services/fen";
import ControlButtons from "@/components/ui/ControlButtons";
import StartMenu from "@/components/ui/StartMenu";
import CapturedPanel from "@/components/ui/CapturedPanel";
import GameOverModal from "@/modals/GameOverModal";

function App() {
  /* ---------- –ª–æ–∫–∞–ª—å–Ω–∏–π state ---------- */
  const [showMenu, setShowMenu] = useState(true);
  const [flip, setFlip] = useState(false);
  const [initialTime, setInitialTime] = useState(300);

  const [board, setBoard] = useState(new Board());
  const whitePlayer = useMemo(() => new Player(Colors.WHITE), []);
  const blackPlayer = useMemo(() => new Player(Colors.BLACK), []);
  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);

  const [promotionCell, setPromotionCell] = useState<Cell | null>(null);
  const [selectedCell, setSelectedCell] = useState<Cell | null>(null);

  const [isGameOver, setIsGameOver] = useState(false);
  const [gameOverMessage, setGameOverMessage] = useState<string | null>(null);

  const [restartTrigger, setRestartTrigger] = useState(0);
  const [hasGameStarted, setHasGameStarted] = useState(false);

  const [playerColor, setPlayerColor] = useState<Colors>(Colors.WHITE); // —è–∫–∏–º –∫–æ–ª—å–æ—Ä–æ–º –≥—Ä–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  const [vsBot, setVsBot] = useState(false);                            // —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π –±–æ—Ç

  /* ---------- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –≥–µ—Ç–µ—Ä–∏ ---------- */
  const getCurrentPlayer = () => currentPlayer;
  const getCurrentBoard = () => board;

  /* ---------- –∫–æ–ª—ñ—Ä, —è–∫–∏–º –≥—Ä–∞—î –±–æ—Ç ---------- */
  const botColor: Colors = playerColor === Colors.WHITE ? Colors.BLACK : Colors.WHITE;

  /* ---------- –ª–æ–≥—ñ–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —Ö–æ–¥—ñ–≤ + –±–æ—Ç ---------- */
  const {
    moveHistory,
    fenHistory,
    currentIndex,
    handleMoveComplete,
    handleRestoreByIndex,
    resetHistory,
    setFenHistory,
    setCurrentIndex,
    botThinking,
  } = useMoveHistory(
    whitePlayer,
    blackPlayer,
    setBoard,
    setCurrentPlayer,
    setIsGameOver,
    setGameOverMessage,
    setSelectedCell,
    setHasGameStarted,
    vsBot,
    botColor,            // <‚Äë‚Äë –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ —Ö—É–∫
    getCurrentPlayer,
    getCurrentBoard,
    swapPlayer,
    isGameOver
  );

  /* ---------- —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –¥–æ—à–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ ---------- */
  useEffect(() => {
    const newBoard = new Board();
    newBoard.initCells();
    newBoard.addFigures();
    setBoard(newBoard);
  }, []);

  /* ---------- –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏ ---------- */
  function restart(selected: "white" | "black" = "white", time: number = initialTime) {
    const newBoard = new Board();
    newBoard.initCells();
    newBoard.addFigures();

    setBoard(newBoard);
    resetHistory();
    setFenHistory([generateFEN(newBoard, Colors.WHITE)]);
    setCurrentIndex(0);
    setInitialTime(time);
    setRestartTrigger((v) => v + 1);
    setHasGameStarted(false);

    setIsGameOver(false);
    setGameOverMessage(null);
    setPromotionCell(null);

    // üî• —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è currentPlayer
    setCurrentPlayer(new Player(Colors.WHITE));

    // —Ñ—ñ–∫—Å—É—î–º–æ, —è–∫–∏–º –∫–æ–ª—å–æ—Ä–æ–º –≥—Ä–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    setPlayerColor(selected === "white" ? Colors.WHITE : Colors.BLACK);
  }

  /* ---------- –∑–¥–∞—Ç–∏—Å—è ---------- */
  function handleSurrender() {
    setIsGameOver(true);
    setGameOverMessage(
      currentPlayer?.color === Colors.WHITE
        ? "–ë—ñ–ª—ñ –∑–¥–∞–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö"
        : "–ß–æ—Ä–Ω—ñ –∑–¥–∞–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö"
    );
  }

  /* ---------- –∑–º—ñ–Ω–∞ –≥—Ä–∞–≤—Ü—è ---------- */
  function swapPlayer() {
    setCurrentPlayer((prev) =>
      prev?.color === Colors.WHITE ? blackPlayer : whitePlayer
    );
  }

  /* ---------- –≤–∏–±—ñ—Ä —Ñ—ñ–≥—É—Ä–∏ –¥–ª—è –ø—Ä–æ–º–æ—Ü—ñ—ó ---------- */
  function handlePromotionSelect(figureName: FigureNames) {
    if (!promotionCell) return;
    const color = promotionCell.figure?.color;
    if (!color) return;

    let newFigure;
    switch (figureName) {
      case FigureNames.ROOK:
        newFigure = new Rook(color, promotionCell);
        break;
      case FigureNames.KNIGHT:
        newFigure = new Knight(color, promotionCell);
        break;
      case FigureNames.BISHOP:
        newFigure = new Bishop(color, promotionCell);
        break;
      default:
        newFigure = new Queen(color, promotionCell);
    }

    promotionCell.setFigure(newFigure);
    setPromotionCell(null);
    setBoard(board.getCopyBoard());
  }

  /* ---------- –≤—Ç—Ä–∞—Ç–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä–∏ ---------- */
  const opponentColor = playerColor === Colors.WHITE ? Colors.BLACK : Colors.WHITE;
  const playerLost = playerColor === Colors.WHITE ? board.lostWhiteFigures : board.lostBlackFigures;
  const opponentLost = playerColor === Colors.WHITE ? board.lostBlackFigures : board.lostWhiteFigures;

  const restartColor: "white" | "black" =
    currentPlayer?.color === Colors.WHITE ? "white" : "black";

  /* ---------- —Ä–µ–Ω–¥–µ—Ä ---------- */
  return (
    <div className="app-wrapper flex justify-center items-start min-h-screen bg-[#1a1a1a]">
      <div className="app flex">
        {/* ---- –≥–æ–ª–æ–≤–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ (–¥–æ—à–∫–∞ + –∑–∞—Ö–æ–ø–ª–µ–Ω—ñ —Ñ—ñ–≥—É—Ä–∏) ---- */}
        <div
          className={`main-content flex flex-col items-center gap-2 py-2 ${flip ? "flex-col-reverse" : ""
            }`}
        >
          {/* –∑–∞—Ö–æ–ø–ª–µ–Ω—ñ —Ñ—ñ–≥—É—Ä–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞ (–∑–≤–µ—Ä—Ö—É) */}
          <CapturedPanel
            lostWhiteFigures={opponentColor === Colors.WHITE ? opponentLost : []}
            lostBlackFigures={opponentColor === Colors.BLACK ? opponentLost : []}
            position="top"
          />

          {/* —Å–∞–º–∞ –¥–æ—à–∫–∞ */}
          <BoardComponent
            board={board}
            setBoard={setBoard}
            currentPlayer={currentPlayer}
            swapPlayer={swapPlayer}
            promotionCell={promotionCell}
            setPromotionCell={setPromotionCell}
            fenHistory={fenHistory}
            isGameOver={isGameOver}
            setIsGameOver={setIsGameOver}
            setGameOverMessage={setGameOverMessage}
            selectedCell={selectedCell}
            setSelectedCell={setSelectedCell}
            onMoveComplete={handleMoveComplete}
            flip={flip}
          />

          {/* –∑–∞—Ö–æ–ø–ª–µ–Ω—ñ —Ñ—ñ–≥—É—Ä–∏ –≥—Ä–∞–≤—Ü—è (–∑–Ω–∏–∑—É) */}
          <CapturedPanel
            lostWhiteFigures={playerColor === Colors.WHITE ? playerLost : []}
            lostBlackFigures={playerColor === Colors.BLACK ? playerLost : []}
            position="bottom"
          />

          {/* –º–æ–¥–∞–ª–∫–∞ –ø—Ä–æ–º–æ—Ü—ñ—ó */}
          {promotionCell && (
            <PromotionModal
              color={promotionCell.figure!.color}
              onSelect={handlePromotionSelect}
            />
          )}
        </div>

        {/* ---- —Å–∞–π–¥–±–∞—Ä ---- */}
        <div className="sidebar">
          {showMenu ? (
            /* —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é */
            <div className="menu-wrapper">
              <StartMenu
                onSelectSide={(color, time, withBot) => {
                  setVsBot(withBot);
                  setInitialTime(time);
                  setFlip(color === "black");
                  restart(color, time);
                  setShowMenu(false);
                }}
                setFlip={setFlip}
              />
            </div>
          ) : (
            /* –ø–∞–Ω–µ–ª—ñ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –¥–æ—à–∫–∏ */
            <>
              <div className="flex items-center justify-between gap-2 mb-2">
                <button
                  className="bg-black/50 hover:bg-black/60 text-white px-3 py-1 rounded-md text-sm flex items-center gap-1"
                  onClick={() => setFlip(!flip)}
                >
                  üîÑ –†–æ–∑–≤–µ—Ä–Ω—É—Ç–∏
                </button>
                <button
                  className="bg-black/50 hover:bg-black/60 text-white px-3 py-1 rounded-md text-sm flex items-center gap-1"
                  onClick={() => restart(restartColor, initialTime)}
                >
                  üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
                </button>
              </div>

              <Timer
                currentColor={currentPlayer?.color ?? Colors.WHITE}
                isGameOver={isGameOver}
                hasGameStarted={hasGameStarted}
                isBotThinking={botThinking}
                initialTime={initialTime}
                onTimeout={(color) => {
                  setIsGameOver(true);
                  setGameOverMessage(
                    color === Colors.WHITE
                      ? "–£ –ë—ñ–ª–∏—Ö –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —á–∞—Å ‚Äî –ø–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö"
                      : "–£ –ß–æ—Ä–Ω–∏—Ö –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —á–∞—Å ‚Äî –ø–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö"
                  );
                }}
              />

              <HistoryPanel
                history={moveHistory}
                activeIndex={currentIndex}
                onSelect={handleRestoreByIndex}
                lostWhiteFigures={board.lostWhiteFigures}
                lostBlackFigures={board.lostBlackFigures}
              />

              <ControlButtons
                goBack={() => handleRestoreByIndex(currentIndex - 1)}
                goForward={() => handleRestoreByIndex(currentIndex + 1)}
                goToCurrent={() => handleRestoreByIndex(fenHistory.length - 1)}
                surrender={handleSurrender}
              />
            </>
          )}
        </div>
      </div>

      {/* –º–æ–¥–∞–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ */}
      {isGameOver && (
        <GameOverModal
          message={gameOverMessage || "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}
          onRestart={() => {
            setShowMenu(true);
            setIsGameOver(false);
          }}
        />
      )}
    </div>
  );
}

export default App;
