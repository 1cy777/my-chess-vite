// src/hooks/useMoveHistory.ts
//
// –ì–æ–ª–æ–≤–Ω–∏–π —Ö—É–∫, —è–∫–∏–π –≤–µ–¥–µ —ñ—Å—Ç–æ—Ä—ñ—é —Ö–æ–¥—ñ–≤ —ñ, –∑–∞ –ø–æ—Ç—Ä–µ–±–∏, –∫–µ—Ä—É—î Stockfish‚Äë–±–æ—Ç–æ–º.
// –ê–∫—Ç—É–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±—É–¥—å‚Äë—è–∫–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –±–æ—Ç–∞ –π –ø—Ä–∏–º—É—Å–æ–≤–∏–º
// rerender‚Äô–æ–º –¥–æ—à–∫–∏ –ø—ñ—Å–ª—è –π–æ–≥–æ —Ö–æ–¥—É.

import { useState, useEffect } from "react";

import { MoveInfo } from "@/models/MoveInfo";
import { Colors } from "@/models/Colors";
import { Cell } from "@/models/board/Cell";
import { Figure, FigureNames } from "@/models/figures/Figure";
import { generateFEN, fromFEN } from "@/services/fen";
import { getNextColor } from "@/services/colorUtils";
import { Player } from "@/models/Player";
import { Board } from "@/models/board/Board";
import {
  isCheck,
  isCheckmate,
  checkForDrawConditions,
} from "@/models/board/board-logic/boardStatus";
import { getBestMove } from "@/services/stockfishBot";
import { fromNotation } from "@/services/moveParser";

export function useMoveHistory(
  whitePlayer: Player,
  blackPlayer: Player,
  setBoard: (b: Board) => void,
  setCurrentPlayer: (p: Player) => void,
  setIsGameOver: (v: boolean) => void,
  setGameOverMessage: (msg: string | null) => void,
  setSelectedCell: (c: Cell | null) => void,
  setHasGameStarted: (v: boolean) => void,
  vsBot: boolean,
  botColor: Colors,                           // üÜï —Ö—Ç–æ –≥—Ä–∞—î –∑–∞ –±–æ—Ç–∞
  getCurrentPlayer: () => Player | null,
  getCurrentBoard: () => Board,
  swapPlayer: () => void,
  isGameOver: boolean,
  botDepth = 8
) {
  /* ---------- state ---------- */
  const [fenHistory, setFenHistory]   = useState<string[]>([]);
  const [moveHistory, setMoveHistory] = useState<MoveInfo[]>([]);
  const [currentIndex, setCurrentIndex] = useState(-1);
  const [botThinking, setBotThinking]   = useState(false);

  /* ---------- async Stockfish —Ö—ñ–¥ ---------- */
  const makeBotMove = async () => {
    if (botThinking) return; // –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É

    const player = getCurrentPlayer();
    const board  = getCurrentBoard();

    if (!player || player.color !== botColor || isGameOver) return;

    setBotThinking(true);
    const fen = generateFEN(board, botColor);
    console.log("[Bot] FEN ‚Üí", fen);

    try {
      const uci = await getBestMove(fen, botDepth);
      console.log("[Bot] bestmove", uci);

      const parsed = fromNotation(board, uci);
      if (!parsed) throw new Error("Cannot parse bot move " + uci);

      const { from, to } = parsed;
      const captured: Figure | null = to.figure ?? null;

      /* 1. –∑–º—ñ–Ω—é—î–º–æ –º–æ–¥–µ–ª—å –¥–æ—à–∫–∏ */
      to.setFigure(from.figure!);
      from.figure = null;

      /* 2. —Ñ—ñ–∫—Å—É—î–º–æ —Ö—ñ–¥ (–º–∞—Ç / —à–∞—Ö / —ñ—Å—Ç–æ—Ä—ñ—è) */
      handleMoveComplete(from, to, captured);

      /* 3. –ø—Ä–∏–º—É—à—É—î–º–æ React –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏ –Ω–æ–≤—É –¥–æ—à–∫—É */
      setBoard(board.getCopyBoard());

      /* 4. –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ –ª—é–¥–∏–Ω—ñ */
      swapPlayer();
    } catch (e) {
      console.error("[Bot] error:", e);
    } finally {
      setBotThinking(false);
    }
  };

  /* ---------- —Ç—Ä–∏–≥–µ—Ä –±–æ—Ç–∞ –ø—ñ—Å–ª—è —Ö–æ–¥—É —Å—É–ø–µ—Ä–Ω–∏–∫–∞ ---------- */
  useEffect(() => {
    if (!vsBot) return;

    const lastMove   = moveHistory.at(-1);
    const nextPlayer = getCurrentPlayer();

    if (
      lastMove?.color !== botColor &&        // –æ—Å—Ç–∞–Ω–Ω—ñ–º —Ö–æ–¥–∏–≤ —Å—É–ø–µ—Ä–Ω–∏–∫
      nextPlayer?.color === botColor &&      // —Ç–µ–ø–µ—Ä —á–µ—Ä–≥–∞ –±–æ—Ç–∞
      !isGameOver
    ) {
      queueMicrotask(() => makeBotMove());
    }
  }, [moveHistory, vsBot, botColor, isGameOver]);

  /* ---------- –∞–≤—Ç–æ–ø–æ—á–∞—Ç–æ–∫, —è–∫—â–æ –±–æ—Ç¬†‚Äî –±—ñ–ª—ñ ---------- */
  useEffect(() => {
    if (
      vsBot &&
      moveHistory.length === 0 &&
      getCurrentPlayer()?.color === botColor &&
      !isGameOver
    ) {
      queueMicrotask(() => makeBotMove());
    }
  }, [vsBot, botColor, isGameOver]);

  /* ---------- –∑–∞–ø–∏—Å —Ö–æ–¥—É (—Å–ø—ñ–ª—å–Ω–∏–π –¥–ª—è –ª—é–¥–∏–Ω–∏ —ñ –±–æ—Ç–∞) ---------- */
  function handleMoveComplete(
    from: Cell,
    to: Cell,
    captured: Figure | null,
    promotion?: FigureNames,
    movedFigure?: Figure
  ) {
    const figure = movedFigure ?? from.figure;
    if (!figure) return;

    from.board.updateKingCheckStatus();

    /* –Ω–æ—Ç–∞—Ü—ñ—è & —Å—Ç–∞—Ç—É—Å */
    const isKing      = figure.name === FigureNames.KING;
    const isCastling  = isKing && Math.abs(from.x - to.x) === 2;

    let notation = isCastling
      ? to.x === 6
        ? "O-O"
        : "O-O-O"
      : `${figure.getFigureNotation()}${captured ? "x" : ""}${to.getChessNotation()}` +
        (promotion ? `=${promotion[0]}` : "");

    const opponent = getNextColor(figure.color);
    const drawMsg  = checkForDrawConditions(from.board);

    if (drawMsg) {
      setIsGameOver(true);
      setGameOverMessage(drawMsg);
    } else if (isCheckmate(from.board, opponent)) {
      notation += "#";
      setIsGameOver(true);
      setGameOverMessage(
        figure.color === Colors.WHITE
          ? "–ë—ñ–ª—ñ –≤–∏–≥—Ä–∞–ª–∏ (–º–∞—Ç)"
          : "–ß–æ—Ä–Ω—ñ –≤–∏–≥—Ä–∞–ª–∏ (–º–∞—Ç)"
      );
    } else if (isCheck(from.board, opponent)) {
      notation += "+";
    }

    /* —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Å MoveInfo */
    const info: MoveInfo = {
      notation,
      figure:    figure.getFigureNotation(),
      from:      from.getChessNotation(),
      to:        to.getChessNotation(),
      captured:  captured?.getFigureNotation(),
      promotion,
      color:     figure.color,
      fen:       generateFEN(from.board, getNextColor(figure.color)),
    };

    /* –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é */
    setMoveHistory(prev => {
      const next = [...prev];
      const idx  = currentIndex + 1;
      next[idx]  = info;
      return next.slice(0, idx + 1);
    });

    if (currentIndex === -1) setHasGameStarted(true);

    setFenHistory(prev => {
      const next = [...prev];
      next[currentIndex + 1] = info.fen;
      return next;
    });

    setCurrentIndex(i => i + 1);
  }

  /* ---------- –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —ñ—Å—Ç–æ—Ä—ñ—ó ---------- */
  function handleRestoreByIndex(idx: number) {
    const fen = fenHistory[idx];
    if (!fen) return;

    try {
      const { board, currentColor } = fromFEN(fen);
      board.updateKingCheckStatus();
      setBoard(board);
      setCurrentPlayer(currentColor === Colors.WHITE ? whitePlayer : blackPlayer);
      setSelectedCell(null);
      setIsGameOver(false);
      setGameOverMessage(null);
      setCurrentIndex(idx);
    } catch (e) {
      console.error("FEN restore error", e);
    }
  }

  /* ---------- —Å–∫–∏–¥–∞–Ω–Ω—è ---------- */
  function resetHistory() {
    setMoveHistory([]);
    setFenHistory([]);
    setCurrentIndex(-1);
  }

  /* ---------- –ø—É–±–ª—ñ—á–Ω–∏–π API —Ö—É–∫–∞ ---------- */
  return {
    moveHistory,
    fenHistory,
    currentIndex,
    setFenHistory,
    handleMoveComplete,
    handleRestoreByIndex,
    resetHistory,
    setCurrentIndex,
    botThinking,
  };
}
